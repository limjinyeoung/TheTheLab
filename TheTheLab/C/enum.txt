enum : 사용자 정의 타입

struct user {
	int a;
 	char* name;
}; 			//4+1(+3) => 8byte


union data {
	int a;
	char b;
	double c;
}			//공용체(union)은 멤버 중 가장 큰 크기를 가지는 멤버의 크기를 가진다. =>8byte  
**가장 마지막에 대입된 데이터만 유효함.
**바이트 단위의 데이터를 분해할 때 사용.











enum State {		//상수를 관리할 때에 사용
	STATE_RUNNING = 42;
	STATE_STOP;		//43
	STATE_INTERRUPT		//44
};

int main()
{
	enum State state;		//state는 enum State에 지정된 값만 저장할 수 있음.
	state = STATE_RUNNING;		//정상
	state = 100;			//오류(C에서는 오류 안남)
	printf("%d\n", state);		//42
}



enum의 문제점
1. 타입 안정성이 떨어진다. int로 취급되기 때문에, 이상한 값이 들어오는 부분을 컴파일 에러로 감지할 수 없다.
2. enum의 요소가 전역적인 공간에 존재한다.
3. switch / if / else if ...같은 코드가 계속 발생한다. => OCP를 만족하지 않는다. 
4. 정수 타입으로 취급이 되는데 정확한 크기에 대한 정의가 없다.

프로그램을 실행시키면 프로세스가 됨.
자바같은 경우에는 프로세스가 실행될때 가장 먼저 메인함수가 실행되게 됨.
그러나 메인에서 다루는 다른 클래스를 필요로 할때 동시에 처리할 수 있게 하는것이 스레드.




프로세스(환경)	:메모리에 존재하는 프로그램, 실행중인 프로그램

-열고있는 파일을 관리
-메모리 관리
		
thread 스레드 :  코드를 실행하는 역할을 수행하는 운영체제의 서비스
-main thread(primary thread) : main함수 실행
-별도의 스레드를 생성하면, 원하는 함수를 동시에 수행할 수 있다. 
-concurrent 병행: 동시에 수행되는 것처럼 보이지만, 동시에 수행되지 않음.
-parallel 병렬: 두 개 이상의 CPU(CORE)를 가지고 있는 컴퓨터를 사용하고 있다면, 동시에 수행된다.



Ram:물리 메모리
-물리메모리를 직접적으로 사용하면 단편화의 문제가 발생. (잉여메모리 발생)
=>가상메모리를 물리메모리에 나누어 처리.

스레드를 사용하면 같은 메모리를 공유한다.->메모리에 대한 접근이 쉬움. / 만약 잘못 만든다면 안정성을 확보하기 어렵다.












멀티 프로세스 프로그래밍 : 여러개의 프로세스를 통해 문제를 해결하는 프로그램
- 다른 프로세스가 비정상 종료돼도 다른 프로세스는 영향을 받지 않음
- 프로세스간에 데이터 교환이 어려움


멀티 스레드 프로그래밍 : 여러개의 스레드를 통해 문제를 해결하는 프로그램
- 데이터 교환이 편리함
- 하나의 스레드가 잘못된 연산으로 종료될 경우, 프로세스 내의 모든 스레드가 영향을 받음.(안정성X)








프로세스의 구성
-TEXT : 코드(함수)
-DATA : 전역변수 / 정적 필드
-HEAP : 동적 메모리 할당 / 객체
-STACK : 지역변수/ 함수가 동작하는 데에 사용





CPU
-SP : stack pointer (stack의 어디에 넣을지를 가리킴)
-BP : base pointer (stack이 어디서부터 시작되는지 가리킴)
-IP : instruction pointer (stack에서 현재 실행하고있는 부분을 가르킴)
***메모리를 넘어서면 stack overflow가 발생


